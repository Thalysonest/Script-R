# instalar pacotes

install.packages("textreuse")
install.packages("rslp")
install.packages("tm")
install.packages("proxy")
install.packages("factoextra")
install.packages("smdc")
install.packages("text2vec")
install.packages("ANLP")
install.packages("ngram")
install.packages("ggplot2")
install.packages("stringr")
install.packages("stringi")
install.packages("cluster")
install.packages("dendextend")

# carregar os pacotes instalados
library(textreuse)
library(rslp)
library(tm)
library(proxy)
library(factoextra)
library(smdc)
library(text2vec)
library(ANLP)
library(ngram)
library(ggplot2)
library(stringr)
library(stringi)
library(cluster)
library(dendextend)

###########################################################################
####################### DECLARAÇÕES DE FUNÇÕES ############################
searchword2 <- function(palavra,vetorcharacter){
  
  a=1
  if(class(vetorcharacter)=="character"){
    while(a <= length(vetorcharacter)){
      if(palavra==vetorcharacter[a]){
        return(a)
      }
      a=a+1
    }
  }
  return(0)
}
retirar_plural <- function(palavra,lista){
  
  i=1
  
  lista_excecao <- as.data.frame(matrix(c("variáveis","variável","tangíveis","tangível","saudáveis","suadável","intangíveis","intangível"),ncol = 2, byrow = TRUE))
  
  colnames(lista_excecao) <- c("Plural","Singular")
  
  lista_excecao$Plural <- as.character(lista_excecao$Plural)
  
  lista_excecao$Singular <- as.character(lista_excecao$Singular)
  
  # Variável que vai receber a palavra plural 
  word_plural <- vector()
  
  # variável que vai receber a palavra que não está mais na forma plural
  n_plural <- vector()
  
  #loop para o número de palavras 
  while(i <= length(palavra)){
    
    p <- searchword2(palavra[i],lista_excecao[,1])
    
    # verifica se a palavra pertence a uma lista especial de plurais
    if(p > 0){
      palavra[i] <- lista_excecao[p,2]
    }
    
    # Verifica se a palavra termina com s
    if(str_sub(palavra[i],nchar(palavra[i])) == "s"){
      
      word_plural[length(word_plural)+1] <- palavra[i]
      
      # verifica se a palavra termina com "ões","ãos" e "ães" se sim substituir por
      # ão ex: operações
      if(str_sub(palavra[i],nchar(palavra[i])-2) == "ões" 
         || str_sub(palavra[i],nchar(palavra[i])-2) == "ãos" 
         || str_sub(palavra[i],nchar(palavra[i])-2) == "ães"){
        
        palavra[i] <- paste(str_sub(palavra[i],1,nchar(palavra[i])-3),"ão",sep = "")
        
        # Palavras terminada com "zes" ex: rapazes
      }else if(str_sub(palavra[i],nchar(palavra[i])-2) == "zes"){
        
        palavra[i] <- str_sub(palavra[i],1,nchar(palavra[i])-2)
        
        # Palavras que terminam com "res" ex: vendedores 
      }else if(str_sub(palavra[i],nchar(palavra[i])-2) == "res"){
        
        palavra[i] <- str_sub(palavra[i],1,nchar(palavra[i])-2)
        
        # Palavras que terminam com "ais" ex: varais
      }else if(str_sub(palavra[i],nchar(palavra[i])-2) == "ais"){
        
        palavra[i] <- paste(str_sub(palavra[i],1,nchar(palavra[i])-2),"l", sep = "")
        
        # Palavras que terminam com "éis" ex: aluguéis 
      }else if(str_sub(palavra[i],nchar(palavra[i])-2) == "éis"){
        
        palavra[i] <- paste(str_sub(palavra[i],1,nchar(palavra[i])-3),"el", sep = "")
        
        # Palavras que terminam com "eis" ex: contábeis
      }else if(str_sub(palavra[i],nchar(palavra[i])-2) == "eis"){
        
        palavra[i] <- paste(str_sub(palavra[i],1,nchar(palavra[i])-3),"il", sep = "")
        
        # Palavras que terminam com "óis" ex: lençóis
      }else if(str_sub(palavra[i],nchar(palavra[i])-2) == "óis"){
        
        palavra[i] <- paste(str_sub(palavra[i],1,nchar(palavra[i])-3),"ol", sep = "")
        
        # Palavras que terminam com "uis" ex : pauis
      }else if(str_sub(palavra[i],nchar(palavra[i])-2) == "uis"){
        
        palavra[i] <- paste(str_sub(palavra[i],1,nchar(palavra[i])-2),"l", sep = "")
        
        # Palavras que terminam com "ns" ex: origens 
      }else if(str_sub(palavra[i],nchar(palavra[i])-1) == "ns"){
        
        palavra[i] <- paste(str_sub(palavra[i],1,nchar(palavra[i])-2),"m", sep = "")
        
        # Palavras que terminal com "os" ex: atributos
      }else if(str_sub(palavra[i],nchar(palavra[i])-1) == "os"){
        
        palavra[i] <- str_sub(palavra[i],1,nchar(palavra[i])-1)
        
        # Palavras que terminal com "as" ex: falhas
      }else if(str_sub(palavra[i],nchar(palavra[i])-1) == "as"){
        
        palavra[i] <- str_sub(palavra[i],1,nchar(palavra[i])-1)
        
        # Palavras que terminal com "es" ex: emergentes
      }else if(str_sub(palavra[i],nchar(palavra[i])-1) == "es"){
        
        palavra[i] <- str_sub(palavra[i],1,nchar(palavra[i])-1)
        
      }
      n_plural[length(n_plural)+1] <- palavra[i]
    }
    i=i+1
  }
  if(lista == 0){
    # retornar 
    ps <- cbind(word_plural,n_plural)
    colnames(ps) <- c("Plural","Singular")
    return(ps)
    
  }else if(lista == 1 ){
    # Retorna todas as palavras passadas
    return(palavra)
    
  }else if( lista == 2){
    
    # Retorna as palavras que estão na lista de exceção
    return(lista_excecao)
  }
  
}
Retira_Plural <- function(texto_char){
  
  i=1
  
  while(i <= length(texto_char)){
    
    # divide o documento em um vetor de character
    group_word <- words(texto_char[i])
    
    # retira o plural das palavras
    group_word <- retirar_plural(group_word, lista = 1)
    
    # monta o documento novamente
    texto_char[i] <- paste(group_word,collapse=" ")
    
    i=i+1
  }
  return(texto_char)
}
Corpus_To_Char <- function(var_corpus){
  
  var_char <- var_corpus[[1]]$content
  
  if(length(var_corpus)>1){
    
    for ( i in 2:length( var_corpus)){
      
      text <- var_corpus[[i]]$content
      
      var_char <- c( var_char, text)
    }
  }
  
  return(var_char)
}
Frequencia_Absoluta <- function(texto_char){
  
  Palavra <- strsplit(texto_char, "\\W+")
  
  Palavra <- unlist(Palavra)
  
  Palavra <- table(Palavra)
  
  Palavra <- sort(Palavra, decreasing=TRUE)
  
  Palavra <- data.frame(Palavra)
  
  Palavra[,1] <- as.character(Palavra[,1])
  
  return(Palavra)
}
Representante <- function(texto){
  
  # calcula as palavras com maiores frequencias absolutas
  freq_abs <- Frequencia_Absoluta(texto)
  
  # adciona nomes das palavras a names1
  names1 <- freq_abs[,1]
  
  # faz uma copia dos nomes
  names2 <- freq_abs[,1]
  
  # faz o steam dos coment?rios
  names2 <- stemDocument(names2,language = "portuguese")
  
  # adciona a primeira palavra
  vet_normal <- names1[1]
  
  # adciona a primeira palavra do steam
  vet_steam <- names2[1]
  
  i=1
  # loop monta uma lista com a palavras normais e palavras com steam para ser usada na 
  # substitui??o no texto
  while( i <= length(names2)){
    
    if(length(intersect(vet_steam,names2[i]))==0){
      
      vet_normal <- append(vet_normal,names1[i])
      
      vet_steam <- append(vet_steam,names2[i])
    }
    
    i=i+1
  }
  
  # faz o steam dos documentos
  steam_texto <- stemDocument(texto,language = "portuguese")
  
  # seleciona documentos com nchar maior que 2
  steam_texto <- subset(steam_texto,nchar(steam_texto)>2)
  
  # adiciona o documento o primeiro documento a num_word
  num_word <- words(steam_texto[1])
  
  # copia o num_word para normall_comentario
  normal_comentario <- num_word
  
  i=1
  
  #loop para substituir o primeiro documento steam para palavras mais representativa
  while(i <= length(num_word)){
    
    pos <- searchword2(num_word[i],vet_steam)
    
    if(pos>0){
      
      normal_comentario[i] <- vet_normal[pos]
    }
    
    
    i=i+1
  }
  
  # contem o primeiro documento com as palavras mais representativa
  vet_comentario <- paste(normal_comentario,collapse=" ")
  
  
  j=2
  # loop para o numero de documento
  while(j <= length(steam_texto)){
    
    num_word <- words(steam_texto[j])
    
    normal_comentario <- num_word
    
    i=1
    # loop para o n?mero de palavras presente no documento
    while(i <= length(num_word)){
      
      pos <- searchword2(num_word[i],vet_steam)
      
      if(pos > 0){
        
        normal_comentario[i] <- vet_normal[pos]
      }
      
      i=i+1
    }
    # cont?m o coment?rio do documento
    normal_comentario <- paste(normal_comentario,collapse=" ")
    
    # cont?m os coment?rios dos documentos
    vet_comentario <- append(vet_comentario,normal_comentario)
    
    j=j+1
  }
  # retorna uma vari?vel com os documentos substituido pela palavra mais representativa
  return(vet_comentario)
  
}
Dupla_Frequencia <- function(freq1,freq2){
  
  fa <- c()
  
  for(k in 1:length(freq1[,1])){ 
    
    pp <- searchword2(freq1[k,1],freq2[,1])
    
    if(pp==0){
      
      fa <- append(fa,0)
      
    }else if(pp!=0){
      
      fa <- append(fa,freq2[pp,2])
    }
  }
  
  mat <- cbind(freq1,fa)
  
  colnames(mat) <- c("Palavra", "freq_anuncios","freq_ementas")
  
  return(mat)
}
Frequencia_Relativa <- function(matrix){
  
  nomematrix <- rownames(matrix)
  
  rownames(matrix) <- c()
  
  relativo <- apply(matrix,1,function(c)sum(c!=0))
  
  relativo <- ((relativo)/dim(matrix)[2])*100
  
  resultado <- data.frame("Palavra"=nomematrix, "FreqR"= relativo)
  
  vetnum <- head(order(resultado[,2],decreasing = TRUE),length(resultado[,1]))
  
  resultado <- resultado[vetnum,]
  
  rownames(resultado) <- c(1:dim(resultado)[1])
  
  return(resultado)
  
}
Diferenca_Relativa <- function(mat_1,mat_2){
  
  i=1
  # variavel para receber o valor da mat_2
  vet <- c()
  
  while(i <= dim(mat_1)[1]){
    
    # realiza uma pesquisa nas palavras da mat_2
    pos <- searchword2(mat_1[i,1],mat_2[,1])
    
    # se a pos diferente de zero significa que a palavra tambem existe em
    # mat_2
    if(pos!=0){
      vet <- append(vet,mat_2[pos,2])
    }else{
      vet <- append(vet,0)
    }
    i=i+1
  }
  
  # calcula a diferenca 
  dif <- mat_1[,2] - vet
  
  # cria uma matriz 
  mat_new <- data.frame("Palavra"=mat_1[,1],"Freq_1"=mat_1[,2],
                        "Freq_2"= vet,"Diferenca"= dif)
  
  
  return(mat_new)
}
FreqR_Frase <- function(frases,texto_char){
  
  FR_Frase <- function(frase, texto){
    
    cont = 0
    
    # transforma o texto em um vetor de palavras
    word_texto <- words(texto)
    
    # transforma a frase em um vetor de palavras
    word_frase <- words(frase)
    
    vetfr = 0
    
    i=1
    
    for(i in 1:length(word_texto)){
      
      k=1
      
      if(word_frase[k]==word_texto[i]){
        
        cont=1
        if(length(word_frase)>=2){
          for(k in 2:length(word_frase)){
            
            if(i+length(word_frase)-1 <= length(word_texto)){
              
              if(word_frase[k]==word_texto[i+k-1]){
                
                cont=cont+1
                
              }
            }
          }
        }
        
        
      }
      if(cont==length(word_frase)){
        
        vetfr <- 1
        
      }
      
      cont=0
    }
    
    
    return(vetfr)
    
  }
  
  FreqR <- c()
  
  for(j in 1:length(frases)){
    
    vet <- c()
    
    for(p in 1:length(texto_char)){
      
      vet<- append(vet,FR_Frase(frases[j],texto_char[p]))
      
    }
    
    FreqR <- append(FreqR,(sum(vet)/length(vet))*100)
    
  }
  
  r_ngram <- data.frame("frases"=frases,"FreqR"=as.numeric(FreqR))
  
  return(r_ngram)
  
}
Distribuicao_palavra <- function(bigram){
  
  i=1
  # dupla_word cont?m as duas palavras do bigrama
  dupla_word <- words(bigram[i,1])
  
  # criando uma vari?vel do tipo lista para adicionar os dataframe
  lista <- list()
  
  # a primeira coluna do data frame ser? colocado a segunda palavra do bigrama
  # bigram[i,2] est? a frequ?ncia do bigrama stringsAsFactor igual a falso para que
  # as vari?veis do data frame n?o sejam da classe factor
  lista[[i]] <- data.frame(matrix(c(dupla_word[2],bigram[i,2]),ncol = 2),stringsAsFactors=FALSE)
  
  # Adicionando o nome da lista 1
  names(lista)[[i]] <- dupla_word[1]
  
  i=2
  
  while(i <= length(bigram[,1])){
    
    dupla_word <- words(bigram[i,1])
    
    # procura se a palavra 1 da dupla_word j? est? na lista de nomes, se sim vai 
    # retornar a posi??o, caso contr?rio vai retornar zero
    pos <- searchword2(dupla_word[1],names(lista))
    
    if(pos == 0){
      lista[[length(lista)+1]] <- data.frame(matrix(c(dupla_word[2],bigram[i,2]),ncol = 2),stringsAsFactors=FALSE)
      names(lista)[[length(lista)]] <- dupla_word[1]
    }else{
      # adiciona a palavra e sua frequ?ncia ao data frame j? existente
      lista[[pos]] <- rbind(lista[[pos]],data.frame(matrix(c(dupla_word[2],bigram[i,2]),ncol = 2)),stringsAsFactors=FALSE)
    }
    i=i+1
    
  }
  # Loop para modificar a lista
  for(a in 1:length(lista)){
    
    # transforma a segunda coluna do dataframe em num?rico
    lista[[a]][,2] <- as.numeric(lista[[a]][,2])
    
    # Adiciona nomes as colunas do data frame 
    # 1? coluna recebe a palavra que ter? a predi??o
    # 2? coluna recebe nome de frequ?ncia
    names(lista[[a]]) <- c(names(lista)[a],"Frequ?ncia")
    
    # calcula a porcentagem considerando a segunda coluno do dataframe
    porcentagem <- round(lista[[a]][,2]/sum(lista[[a]][,2])*100,3)
    
    # Cria um data.frame com uma coluna com as porcentagens da vari?vel porcentagem
    porcentagem <- data.frame("Porcentagem" = porcentagem)
    
    # combina as colunas j? existente na lista com coluna com as porcentagens
    lista[[a]] <- cbind(lista[[a]],porcentagem)
    
    # soma dos valores absolutos
    sum_abs <- sum(lista[[a]][,2])
    
    #soma das porcentagens
    sum_porc <- sum(lista[[a]][,3])
    
    # diferen?a entre as porcentagens somada considerando 100
    sum_porc <- 100 - sum_porc
    
    if(sum_porc > 0){
      
      lista[[a]][1,3] <- lista[[a]][1,3] + sum_porc
      
    }else if(sum_porc < 0){
      
      lista[[a]][1,3] <- lista[[a]][1,3] - sum_porc
    }
    # Adicionando total, soma dos absolutos e 100%
    lista[[a]][dim(lista[[a]])[1]+1,3] <- 100
    lista[[a]][dim(lista[[a]])[1],2] <- sum_abs
    lista[[a]][dim(lista[[a]])[1],1] <- "Total"
  }
  
  return(lista)
}
FreqR_MFrase <- function(frases,texto_char){
  
  FR_Frase <- function(frase, texto){
    
    cont = 0
    
    # transforma o texto em um vetor de palavras
    word_texto <- words(texto)
    
    # transforma a frase em um vetor de palavras
    word_frase <- words(frase)
    
    vetfr = 0
    
    i=1
    
    for(i in 1:length(word_texto)){
      
      k=1
      
      if(word_frase[k]==word_texto[i]){
        
        cont=1
        
        if(length(word_frase)>=2){
          
          for(k in 2:length(word_frase)){
            
            if(i+length(word_frase)-1 <= length(word_texto)){
              
              if(word_frase[k]==word_texto[i+k-1]){
                
                cont=cont+1
                
              }
            }
          }
        } 
        
        
      }
      if(cont==length(word_frase)){
        
        vetfr <- 1
        
      }
      
      cont=0
    }
    
    
    return(vetfr)
    
  }
  
  FreqR <- c()
  
  for(j in 1:length(frases)){
    
    vet <- c()
    
    for(p in 1:length(texto_char)){
      
      vet <- append(vet,FR_Frase(frases[j],texto_char[p]))
      
    }
    FreqR <- cbind(FreqR,vet)
  }
  
  num <- 0
  
  for (j in 1:dim(FreqR)[1]) {
    
    if(sum(FreqR[j,])>=1){
      
      num <- num+1
      
    }
  }
  
  if(length(frases)>=2){
    
    frases <- paste(frases,collapse = "/")
    
  }
  
  
  return(data.frame("Frase"=frases,"FreqR"=num/length(texto_char)))
  
}

# o numero de linhas para mostrar
l <- 15
ementa <- Corpus(DirSource('diretorio'))

inspect(ementa)

n_ementa <- names(ementa)

ementa <- tm_map(ementa, tolower) 

ementa <- Corpus_To_Char(ementa)

# remove pontuação ex: , .: : a função gsub executa a tarefa de remover

ementa <- gsub("[[:punct:]]"," ",ementa)

ementa <- gsub("'s", " ", ementa)

ementa <- gsub("-"," ", ementa)

ementa <- gsub("\n"," ",ementa)

# transforma a variável ementa na classe corpus
ementa <- Corpus(VectorSource(ementa), readerControl = list(language = "portuguese"))

stopwords_ementa <- stopwords("portuguese")

x <- c("é")

stopwords_ementa <- append(x,stopwords_ementa)

# remove palavras do grupo de stopwords
ementa <- tm_map(ementa, FUN = removeWords, words = stopwords_ementa)

# Retira os espaços em branco nos documentos
ementa <- tm_map(ementa, stripWhitespace) 

# Transforma variavel em character
ementa_char <- Corpus_To_Char(ementa)

# função retira o plural de vários documentos
ementa_char <- Retira_Plural(ementa_char)

# PRÉ PROCESSAMENTO DOS ANÚNCIOS DE EMPREGO

# carrega os anúncios

tab_tads <- read.table("diretorio/anunciosTADS.txt")

tab_tads<- as.character(tab_tads[,2])

empregos <- Corpus(VectorSource(tab_tads))

empregos <- tm_map(empregos, tolower)

empregos <- Corpus_To_Char(empregos)

empregos <- gsub("[[:punct:]]"," ",empregos)

empregos <- gsub("\n"," ",empregos)

# transformando em corpus novamente
empregos <- Corpus(VectorSource(empregos), readerControl = list(language = "portuguese"))

stopwords_empregos <- stopwords("portuguese")
x <- c("é")
stopwords_empregos <- append(x,stopwords_empregos)

empregos <- tm_map(empregos, FUN = removeWords, words = stopwords_empregos)

# Retira os espaços em branco nos documentos
empregos <- tm_map(empregos, stripWhitespace) 

#transforma variavel em character
empregos_char <- Corpus_To_Char(empregos)

# retira plural dos anúncios
empregos_char <- Retira_Plural(empregos_char)

ementa_empregos <- append(ementa_char,empregos_char)

###########################################################################
###########################################################################
# OS ANÚNCIOS E EMENTAS JUNTO PARA SUBSTITUIÇÃO DOS RADICAIS
#lista de palavras com radical e as palavras que pertencem ao mesmo radical
ementa_empregos <- Representante(ementa_empregos)

# ementa de TGQ/ TADS
ementa_char <- ementa_empregos[1:length(ementa_char)]

# muda a codificação das palavras de utf 8 para latini
# Dependendo da versao nao precisa executar, version 0.7-7
#ementa_char <- iconv(ementa_char, "UTF-8", "latin1")

# empregos de TGQ/ TADS
empregos_char <- ementa_empregos[length(ementa_char) + 1:length(ementa_empregos)]

a <- length(ementa_empregos) - length(ementa_char)

empregos_char <- empregos_char[1:a]

# muda a codificação das palavras de utf 8 para latini
#empregos_char <- iconv(empregos_char, "UTF-8", "latin1")

# realiza cálculo das freq. absoluta
freq_ementa <- Frequencia_Absoluta(ementa_char)

head(freq_ementa,l)

# atribui as ementa a outra variável

#ementa_char2 <- iconv(ementa_char, "latin1","UTF-8")

corpus_ementa <- ementa_char

corpus_ementa <- Corpus(VectorSource(corpus_ementa))

tdm_ementa <- TermDocumentMatrix(corpus_ementa, control = list(wordLengths = c(1,Inf)))

dtm_ementa <- DocumentTermMatrix(corpus_ementa, control = list(wordLengths = c(1,Inf)))


# calcula a freq. absoluta dos Anúncios
freq_empregos <- Frequencia_Absoluta(empregos_char)

# mostra as 15 palavras com as maioree freq. absoluta
head(freq_empregos,l)

# mostra frequencia absoluta das mesmas palavras dos anuncios e  as ementas
Da <- Dupla_Frequencia(freq_empregos,freq_ementa)

Da[1:l,]

# atribui as ementa a outra variável
corpus_emprego <- empregos_char

corpus_emprego <- Corpus(VectorSource(corpus_emprego))

tdm_emprego <- TermDocumentMatrix(corpus_emprego, control = list(wordLengths = c(1,Inf)))

dtm_emprego <- DocumentTermMatrix(corpus_emprego, control = list(wordLengths = c(1,Inf)))

# Mostra as 15 maiores frequência relativa das ementas
relativa_ementa <- Frequencia_Relativa(as.matrix(tdm_ementa))

# mostra 15 palavras com maiores freq. relativa nas ementas
relativa_ementa[1:l,]

# cálculo das freq. relativa dos anúncios
relativa_empregos <- Frequencia_Relativa(as.matrix(tdm_emprego))

# mostra 15 palavras com maiores freq. relativa nos anuncios
relativa_empregos[1:l,]

# Mostra frequencia relativa de anuncios e ementas nas mesmas palavras
Dr <- Dupla_Frequencia(relativa_empregos,relativa_ementa)

Dr[1:l,]

# diferença relativa entre anúncios e ementas
dif_relativa_anuncios <- Diferenca_Relativa(relativa_empregos,relativa_ementa)

# seleciona frq. relativa das ementas com zero
le <- dif_relativa_anuncios[dif_relativa_anuncios$Freq_2==0 & dif_relativa_anuncios$Freq_1 > 3.4,]

# mostra em ordem descrescente a lista com as maiores freq relativa entre
# anúncios e ementas
le <- le[head(order(le$Diferenca,decreasing = TRUE),dim(le)[1]),]

le[1:l,]

# DENDROGRAMA DAS EMENTAS tads
dtmss_ementa <- removeSparseTerms(dtm_ementa, 0.8) 

# DENDROGRAMA DAS EMENTAS tgq 
#dtmss_ementa <- removeSparseTerms(dtm_ementa, 0.85)
dtmss_ementa <- as.matrix(dtmss_ementa)

d_ementa <- dist(t(dtmss_ementa), method="euclidean") 

fit_ementa <- hclust(d=d_ementa, method="complete")

library(dendextend)

# dendrograma euclidiano colorido com as palavras alinhadas dos anúncios
dend_ementa <- color_branches(fit_ementa, k = 6)

par( mar = c(4,4,4,2)+2.5)

plot(dend_ementa,lwd = 5, lty = 5,sub="",yaxt='n')

# Dendrograma dos anuncios do TADS
dtmss_empregos <- removeSparseTerms(dtm_emprego, 0.65) 

# Dendrograma dos anuncios do TGQ
#dtmss_empregos <- removeSparseTerms(dtm_emprego, 0.55) 

dtmss_empregos <- as.matrix(dtmss_empregos)

d_empregos <- dist(t(dtmss_empregos), method="euclidean")  

fit_empregos <- hclust(d=d_empregos, method="complete")

# dendrograma euclidiano colorido com as palavras alinhadas dos anúncios

dend_empregos <- color_branches(fit_empregos, k = 6)

par( mar = c(4,4,4,2)+2.5)

# dendrograma dos anúncios
plot(dend_empregos,lwd = 5, lty = 5,sub="",yaxt='n')

# tranforma tdm em uma matriz
mat_tdm_ementa <- as.matrix(tdm_ementa)

# retira .txt dos nomes dos documentos
colnames(mat_tdm_ementa) <- gsub(".txt","",n_ementa)

# HEATMAP DAS EMENTAS
eucli_dist <- as.matrix(dist(t(mat_tdm_ementa), method = "Euclidean"))
eucli_dist <- as.dist(eucli_dist)
fviz_dist(eucli_dist, gradient = list(low = "blue", mid = "white", high = "red"))

# BI-GRAMA DAS EMENTAS
ementa_char <- iconv(ementa_char, "UTF-8", "latin1")
# Obtém os bigramas das ementas
bigram_ementa <- ngram(ementa_char, n =2)

# Monta uma tabela com os bigrams informando a dupla de palavra e 
bigram_ementa <- get.phrasetable(bigram_ementa)

# Mostra os 25 bigramas com maiores frequências
bigram_ementa[1:l,1:2]

# BI-GRAMA DOS ANÚNCIOS
#################################################################################################
empregos_char <- iconv(empregos_char, "UTF-8", "latin1")
# Declarar a dupla de palavras pro bi-grama 
bigram_empregos <- ngram(empregos_char, n =2)

# cria uma tabele com os bi-gramas
bigram_empregos <- get.phrasetable(bigram_empregos)

# mostra 25 das duplas com as maiores frquências
bigram_empregos[1:l,1:2]

# coloca bigrama com suas frequencias absoluta juntas
dfb <- Dupla_Frequencia(bigram_empregos[,1:2],bigram_ementa[,1:2])
dfb[1:l,]

# calcula frequencia relativa de bigramas das ementas
birelativoEm <- FreqR_Frase(bigram_ementa[,1],ementa_char)

# coloca em ordem descrescente
birelativoEm <- birelativoEm[head(order(birelativoEm[,2],decreasing = TRUE),dim(birelativoEm)[1]),]
birelativoEm[1:l,]

# calcula frequencia relativa de bigramas dos anuncios
birelativoAn <- FreqR_Frase(bigram_empregos[,1],empregos_char)

# coloca em ordem descrescente
birelativoAn <- birelativoAn[head(order(birelativoAn[,2],decreasing = TRUE),dim(birelativoAn)[1]),]
birelativoAn[1:l,]

# mostra a tabela de frequencia relativa dos bigramas dos anuncios e 
#ementas
dfbr <- Dupla_Frequencia(birelativoAn,birelativoEm)
dfbr[1:l,]

# mostra a distribuição da segunda palavra no bigrama
dist_empregos <- Distribuicao_palavra(bigram_empregos)

# mostra a distribuição da segunda palavra do bi-grama
dist_empregos$inglês

###########################################################################################
###########################################################################################
# LINGUAGEM DE PROGRAMAÇÃO PRO TADS

linguagem <- c("javascript","html","css","sql","java","bash","shell","python","c",
               "php","typescript","ruby","swift","assembly","go","objective","vbnet",
               "matlab","mysql","perl","vba","scala","groovy","lua","haskell","cobol","linux")

# Funciona apenas para caso do TADS

lista <- FreqR_Frase(linguagem,empregos_char)

lista <- lista[lista[,2]!=0,]

lista <- lista[head(order(lista[,2],decreasing = TRUE),dim(lista)[1]),]

colnames(lista)[1] <- "Linguagem" 

lista

#######################################
######################################################################################
######################################################################################
# lista de palavras de interesse para TGQ
gestao_qualidade <- c("metrologia","auditoria","processo","software",
                      "equipe","iso","ts","ohsa","inglês","excel","espanhol",
                      "francês","gestão qualidade","sistema certificação",
                      "analise problema")

# vai combinar 9000 e 9001 na mesma freq relativa
relativa_9000 <- FreqR_MFrase(c("9001","9000"),empregos_char)

# vai combinar 14000 e 14001 na mesma freq relativa
relativa_14000 <- FreqR_MFrase(c("14000","14001"),empregos_char)

# vai combinar 18000 e 18001 na mesma freq relativa
relativa_18000 <- FreqR_MFrase(c("18000","18001"),empregos_char)

# cria uma variavel vazia
lista <- c()

# realiza um loop para todas palavras ou duplas de palavras da variavel
# gestao_qualidade
for (i in 1:length(gestao_qualidade)){
  # adiciona freq relativa com outras freq relativas
  lista <- rbind(lista,FreqR_MFrase(gestao_qualidade[i],empregos_char))
  
}
# adiciona freq relativa 9000, 14000 e 18000  
lista <- rbind(relativa_9000,relativa_14000,relativa_18000,lista)

# retira palavras selecionadas que tem freq relativa zero
lista <- lista[lista[,2]!=0,]

# coloca em ordem descreste
lista <- lista[head(order(lista[,2],decreasing = TRUE),dim(lista)[1]),]

lista



